#!/usr/bin/python3
import os
import re
from pprint import pprint
import subprocess
import logging
import sys


class wifi_user:
    
    def __init__(self, users, selector, **kwargs):
        
        users_i = {v: k for k, v in users.items()}

        try:
            f = open("/var/lib/misc/dnsmasq.leases", "r") 
            user_line = ''
            
            if(selector in users_i):
                pattern = users_i[selector]
            else:
                pattern = selector
                
            sys.stderr.write("looking for  selector: %s pattern: %s\n" % (selector, pattern))
            for line in f:
                matchObject = re.search(re.escape(pattern),line, re.IGNORECASE)
                if(matchObject):
                    sys.stderr.write("line matched %s\n" % line)
                    user_line = line
            f.close()        
            info_elems = user_line.split(r' ')
            
            self.ip = info_elems[2]
            self.mac = info_elems[1]
            self.hostname = info_elems[3]
            sys.stderr.write("data collected ip: %s mac: %s hostname: %s\n" % (self.ip, self.mac, self.hostname))
            
            
        except:
            self.ip = '192.168.112.240'
            if(selector in users_i):
                self.mac = users_i[selector]
                self.hostname = 'unknown'
            else:
                self.mac = selector
                self.hostname = 'unknown'
       
        if(self.mac in users):
            self.name = users[self.mac] 
        else:
            self.name = 'Guest'
        return None
                
    def _conntrack_kill(self, **kwargs):
        ctrack_str=subprocess.check_output(["sudo","/usr/sbin/conntrack", "-L"],universal_newlines=True)
        #print(ctrack_str)
        ctrack=ctrack_str.split('\n')
        for line in ctrack:
            
            if(re.search(re.escape(self.ip), line) and re.search(r'ESTAB', line)):
                fields = line.split()
                #print(fields)
                cdetails = {}
                for field in fields[4:8]:
                    kv=field.split('=')
                    cdetails[kv[0]]=kv[1]
                #print(cdetails) 
                ctrack_del=subprocess.check_output(["sudo","/usr/sbin/conntrack", "-D", "--orig-src", cdetails['src'], "--orig-dst", cdetails['dst'],"-p", "tcp", "--orig-port-src", cdetails['sport'],  "--orig-port-dst", cdetails['dport'] ],universal_newlines=True)

    def traffic_enable(self, **kwargs):
        try:
            subprocess.check_output(["sudo","iptables","-t", "mangle", "-I", "web", "1", "-m", "mac", "--mac-source", self.mac.upper(), "-j", "RETURN"])
            subprocess.check_output(["sudo","iptables","-t", "mangle", "-I", "internet", "1", "-m", "mac", "--mac-source", self.mac.upper(), "-j", "RETURN"])
            self._conntrack_kill()
        except subprocess.CalledProcessError:
            print("hm non-zero returned")

    def traffic_disable(self, **kwargs):
        try:
            subprocess.check_output(["sudo","iptables","-D", "internet", "-t", "mangle", "-m", "mac", "--mac-source", self.mac.upper(), "-j", "RETURN"])
            subprocess.check_output(["sudo","iptables","-D", "web", "-t", "mangle", "-m", "mac", "--mac-source", self.mac.upper(), "-j", "RETURN"])
            self._conntrack_kill()
        except subprocess.CalledProcessError:
            print("hm non-zero returned")
                
            
        
        

    
    


                    
